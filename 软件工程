软件工程
	软件,软件工程的基本概念
		软件与软件危机
			软件=程序+数据+文档
			软件的平均寿命是5年
			软件危机
				对软件开发成本和进度的估算不准确;
				需求分析不准确;
				质量问题,没有适当的文档
				缺乏方法指导和工具支持,大型软件系统经常失败
				软件不可维护
		软件工程学
			用工程,科学和数学的原则与方法研制,维护计算机软件的有关技术及管理方法
			三要素:  方法,工具,过程
			原则
				抽象
				信息隐蔽
				模块化
				局部化
				确定性
				一致性
				完备性
				可验证性
		传统软件工程和面向对象软件工程
			传统软件工程过程
				计划时期
					问题定义
					可行性研究
				开发时期
					需求分析
					软件设计
					编码
				运行时期
					测试
					维护
		软件开发模型
			传统开发模型
				瀑布模型(文档驱动)--每个阶段依次进行
					阶段间具有顺序性和依赖性
					推迟实现的观点--提出了编码前需要分析这一观点
					质量保证的观点--每个阶段都必须完成规定的文档
				快速原型模型
					需求分析->原型开发->原型评价->最终系统设计->最终系统实现
						^		 | 			|
						|________|__________|
					快速开发工具
					循环-迭代
					低成本		
			演化开发模型
				增量模型
					每个功能当作一个增量,对于单个的增量采用之前的模型来实现,每成功完成一个增量就和前面的版本集成
					迭代的思路
				螺旋模型
					使用原型及其他方法来尽量降低风险;在每个阶段之前增加了风险分析
					瀑布模型+快速原型+风险分析
			面向对象开发模型
				构件组成模型--把现成的"构件"组合成需要的软件
					面向对象
					基于构件库
					融合螺旋模型
					支持软件开发的迭代方法
					软件重用
			形式化开发模型
				转换模型
				净室模型
		CASE工具 
			Computer Aided Software Engineering--计算机辅助软件工程
			项目管理工具
			需求分析工具
			编程环境
			软件测试工具
	软件需求分析基础
		需求分析的结果是"软件需求规格说明书"
		软件需求
			功能,行为,性能,涉及约束
		三大模型
			数据模型
				E-R图
			功能模型
				数据流图DFD
			行为模型
				状态转换图STD
					状态是任何可以被观察到的系统行为模式
					主要状态有:初态,终态和中间状态
					在一张状态图中只能有一个初态,0或多个终态
					事件是状态转变的条件
		可行性研究(初步需求分析)
			成本/效益分析
				成本估计
					代码行估计
					任务分解成小任务估计
					自动估计成本
	分析建模
		结构化分析模型
			核心是数据字典
			数据对象说明
			加工说明
			控制说明
		面向对象分析模型
			核心是"用例"
			类/对象模型
			对象-关系模型
			对象-行为模型
	面向数据流软件系统分析,设计方法
		面向数据流的软件分析
			数据流图DFD
				信息流和数据从输入移动到输出过程中的变换
				没有具体的物理部件,只描绘数据在软件中的逻辑过程
				外部实体(数据的源点或终点)-矩形框
				数据流--箭头
					方向
						加工处理指向数据存储--表示修改,添加或删除数据
						反向--表示查询
				加工处理--圆(圆角矩形)
				数据存储--开口矩形(两条平行横线)
			语法分析法
				名词-潜在外部项,数据流,数据存储
				动词-潜在加工,数据流
			数据字典
				数据字典是关于数据的信息的集合,也就是对数据流图中包含的所有元素的定义的集合.
				元素
					数据流
					数据流分量
					数据处理
					处理
					对数据处理的定义用其他工具,如IPO或PDL描述
				一般信息,定义,使用特点,控制信息,分组信息
			基本加工说明
				DFD中不再细分的加工
				描述方法
					结构化语言--用类似伪代码的语言描述
					决策树
					决策表
						对加工的描述中,条件比较多,而且又互相约束,则适合用决策表
						决策表的田字结构:条件,状态,决策方案,决策规则
						决策表的读表方法:顺时针方向
						绘制步骤
							分析决策问题涉及几个条件
							每个条件取值区间
							分析条件的各种组合
							涉及几个决策方案
							画决策表
							填写决策规则
							合并简化决策表
					盒图(N-S图)					
		面向数据流的软件设计
			把分析阶段建立的逻辑模型建立成可实现的物理模型
			数据设计
			体系结构设计
				步骤
					确定数据流类型(变换型,事务型)
					确定流的边界
					将DFD映射到成SC
						变换型
							划分DFD,把变化中心孤立出来
							一级分解:形成初始的SC图,顶层为主控模块,底层为输入变换,输出模块
							二级分解:把DFD中的处理映射为程序结构中的适当模块;从变换中心的边界开始沿输入,输出通道向外移动
							精化程序结构
						事务型
							确定边界
							画出SC图框架,事务控制模块,接受模块,动作发送模块
							分解和细化接受分支和发送分支
							事务型的重点在于数据流中含有用于确定事务种类的控制信息
					用因子化方法定义
				SC图
					模块调用有三种,简单,选择,循环
					数据信息用空心圆+箭头
					控制信息用实心圆+箭头
				模块化设计
					分解
					模块概念
						作用范围:受到该模块内部一个判定影响的所有模块集合
						控制范围:包括该模块本身及其所有下属模块的集合
					模块独立性
						内聚:模块内各成分之间
							低内聚
									偶然性内聚
								逻辑性内聚
								时间性内聚
							中内聚
								过程性内聚
								通信性内聚
							高内聚
								顺序性内聚
								功能性内聚
						耦合:一个模块与其他模块之间
							非直接耦合
							数据耦合:仅传递数据流,不传控制流
							特征耦合
							控制耦合
							外部耦合
							公共耦合:两个模块访问同一个全局变量
							内容耦合
							尽量使用数据耦合;减少控制耦合;限制外部耦合和公共耦合
						内聚大,耦合小则独立性强
					优化原则
						模块的作用范围应该小于控制模块
						保持高扇入(高层调用多个低层)/低扇出
			接口设计
				SC图
			过程设计
				流程图
				NS图
				PDL语言
	面向对象的软件系统分析,设计方法
		面向对象 = 对象+类+继承+消息通信
		开发过程
			分析阶段
				论域分析
				应用分析
			高层设计
			类的开发
			实例的建立
			组装测试
		面向对象的软件分析
			确定所有与待解决问题相关的类:包括其操作,属性,类与类之间的关系和方法
			类的层次:继承关系等
		面向对象的软件设计
			以可实现的方式描述每一个子系统
			对象设计
			消息设计:对象-关系模型
		UML标准图
			用户模型视图:从用户举角度表示系统
				用例图
				活动图
			结构模型视图:从系统内部看数据和功能
				类和对象图
				状态图
				时序图
				协作图
				活动图
			行为模型视图:系统动态和行为
				状态图
				时序图
				协作图
				构件图
				配置图
			实现模型视图:将系统的结构和行为表达成易于转换为实现的方式
				构件图
				.
			环境模型视图:系统实现环境的结构和行为
				配置图
				.
		UML规划分析操作
			相互作用图(时序图,协同图)
			分析对象&类
			对象图,类图
			类分组
			封包图
			状态图
			构件图
			配置图
	UML,RUP及其工具
	软件测试-仅为发现错误,不定位和纠正错误
		动态分析
			黑盒测试
				等价分类法
					把输入数据的可能值划分为若干等价类
					有效等价类和无效等价类
					每一无效等价类至少需要一个测试用例
				边界值分析法
					在边界值及其附近运行
			白盒测试
				逻辑覆盖法
					每条语句至少执行一次
					每一判定每个分支至少执行一次
					每个判定的每个条件,分别按真假各执行一次
					求出判定中所有条件的各种可能组合值,每一可能的组合至少执行一次
				基本路径法
					环路复杂性度量等于程序中独立路径的条数
					等于流图中区域的个数
					等于边数-节点数+2
					等于谓词节点数+1
					根据独立路径数设计测试用例,使得遍历每条独立路径
	软件维护,软件重用
	软件项目管理,配置管理

	其他
参考教材
	<软件工程> 齐治昌
	<软件工程导论> 张海藩
	<软件工程--原理,方法与应用> 史济民
	<Software Engineering Theory and Practice> Shari L