第一章 计算机系统结构的基础知识
	计算机系统结构的基本概念
		计算机性能增长率下降的原因:
			功耗问题
			可以进一步有效开发的指令级并行性很少
			存储器访问速度的提高缓慢
		发展趋势：已经从指令级并行转向开发线程级并行和数据级并行
		计算机层次结构
			微程序机器级
				固件/硬件直接执行微指令编写的微程序
			传统机器语言级
				由微程序进行解释执行;
				微程序解释指令系统被称作"仿真"
			操作系统机器级
				该级机器语言由传统机器级指令和操作系统级指令构成
			汇编语言机器级
			高级语言机器级
			应用语言机器级
			翻译:
				用转换程序将高一级机器上的程序转换为低一级机器上等效的程序,然后在低一级机器上运行
			解释:
				对高一级机器上的程序中的每一条语句或指令,都是转去执行低一级机器上的一段等效的程序
			微程序到操作系统三级一般用解释实现,其他一般用翻译实现
			微程序级和传统机器级使用硬件/固件实现,称为物理机
			其他由软件实现,称为虚拟机
		计算机系统结构的定义
			计算机系统结构是指传统机器程序员所看到的计算机属性,即概念性结构和功能特性
			广义上将系统结构定义为计算机设计的三个方面:指令系统结构,组成和硬件
		计算机组成和计算机实现
			计算机组成指的是计算机系统结构的逻辑实现,包含物理机器级中的数据流和控制流的组成以及逻辑设计等.它重点在于物理机器级内各事物的功能和关系
			计算机实现是指计算机组成的物理实现,重点在于各器件技术和微组装技术
			例,确定指令系统中是否有乘法指令属于计算机系统结构的内容,但乘法指令是用专门的乘法器实现,还是用加法器经过多步操作来实现,属于计算机组成.而乘法器的物理实现,如器件的选择属于计算机实现
		计算机系统结构的分类
			Flynn分类法,按照指令流和数据流的多倍性分类
				单指令流单数据流SISD
				单指令流多数据流SIMD
				多指令流单数据流MISD
				多指令流多数据流MIMD
			冯氏分类,按照系统最大并行度来分类
				最大并行度解释为,计算机系统在单位时间内能够处理的最大二进制位数
			Handler分类法,根据并行度和流水线分类
	计算机系统的设计
		计算机系统设计的四大定量原理
			加快经常性事件的处理速度能明显提高整个计算机系统的性能
			Amdahl定律
				当对一个系统中的某个部件进行改进后,所能获得的整个系统性能的提高,受限于该部件的执行时间占总执行时间的百分比
				定义Fe为可改进部分执行时间占总执行时间的比例,Se为改进前执行时间与改进后执行时间的比
				整个系统在改进某部分之后的加速比为
					S = [1 - Fe + Fe/Se]^(-1)
			CPU性能公式
				CPU时间 = 执行程序所需的时钟周期数 * 时钟周期时间
				CPI 每条指令的平均时钟周期数
				CPU时间 = IC * CPI * 时钟周期时间;IC为所执行的指令条数.
			程序局部性原理
				时间局部性：程序即将用到的信息很可能就是目前正在使用的信息
				空间局部性：程序即将用到的信息很可能与目前正在使用的信息在空间上相邻或邻近
		计算机系统设计者的主要任务
			确定用户对计算机系统的功能，价格和性能的要求
			软硬件功能分配
			设计出生命周期长的系统结构
		计算机系统设计的主要方法
			由上往下，由下往上，从中间开始；中间是指层次结构中的软硬件交界面，一般是传统机器语言机器级与操作系统机器级之间
	计算机系统的性能评测
		执行时间：执行单个程序所花的时间
		吞吐率：单位时间能够完成的任务
	计算机系统结构的发展
		存储程序原理：程序预先存放在计算机存储器中，计算机一旦启动，就能按照程序指定的逻辑顺序执行这些程序，自动完成程序描述的处理工作
		冯诺依曼结构的主要特点：
			计算机以运算器为中心
			在存储器中，指令和数据同等对待
			存储器是按地址访问，按顺序线性编址的一维结构，每个单元的位数是固定的
			指令的执行是顺序的
			指令有操作码和地址码组成
			指令和数据均以二进制编码表示，采用二进制运算
		针对冯诺依曼结构的改进：
			对输入/输出方式的改进：以存储器为中心，DMA等技术
			采用并行处理技术
			存储器组织结构的发展：如在CPU和主存之间设置Cache
			指令系统的发展：精简指令集
		软件对系统结构的影响
			可移植性：指一个软件可以不经修改或者只需少量修改就可以由一台计算机一直到另一台计算机上运行，差别只是执行时间不同；也被称为，软件兼容
			实现可移植性的方法有三种：
				统一高级语言
				采用系列机：
					向上、下,前和后兼容（上下是指同时期的高端和低端计算机，前后是指时期前后）：向上和向后兼容是必须的；向后兼容是系列机的根本特征
				模拟与仿真
					模拟：指用软件的方法在一台现有的计算机上实现另一台计算机的指令系统（机器语言机器级）
					仿真：指用一台现有的计算机上的微程序去就是实现另一台计算机的指令系统（微程序机器级）
					区别在于，仿真的层级更偏向底层；仿真使用微程序就是执行，模拟使用机器语言程序解释执行
		器件发展导致的五代计算机
			第一代，电子管和继电器
			第二代，晶体管
			第三代，SSI,MSI，多层印刷电路
			第四代，半导体
			第五代，高密度电路
		计算机系统结构中并行性的发展
			并行性：指计算机系统在同一时刻或者同一时间间隔进行多种运算或操作，包括同时性和并发性
			同时性：两个或两个以上事件在同一时刻发生
			并发性：两个或两个以上的时间在同一时间间隔内发生
			并行的级别
				从处理数据：字串位串，字串位并，字并位串，全并行
				从执行程序：指令内部并行，指令级~，线程级~，任务级或过程级~，作业或程序级~
			提高并行性的技术途径
				时间重叠：在并行性概念中引入时间因素，让多个处理过程在时间上相互错开，轮流重叠地使用同一套硬件设备的各个部分，以加快硬件周转而提高速度
				资源重复：重复设置硬件资源，大幅度提高计算机系统性能
				资源共享：使多个任务按一定时间顺序轮流使用同一套硬件设备（分时系统）
				紧密耦合系统：计算机之间物理直连
				松散耦合系统：计算机之间通过通道或通信线路连接
				异构型多处理机系统：有多个不同类型，不同功能的处理机组成，使用时间重叠原理的系统
				同构型多处理机系统：由多个同类型或同工能的处理机组成
第二章 指令系统和的设计
	指令系统结构的分类(根据操作数的存储单元分类)
		堆栈型
			push X
			push Y
			add
			pop Z
		累加器型
			load X
			add Y
			store Z
		通用寄存器型
			根据操作数来源分为:寄存器-寄存器(RR)型,寄存器-存储器(RM)型;
			通过ALU指令操作数的特征:ALU指令操作数的个数和存储器操作数的个数
			RM:
			load R1,X
			add R1,Y
			store R1,Z
			RR:
			load R1,X
			load R2,Y
			add R3,R1,R2
			store R3,Z
		三种通用寄存器型指令系统的优缺点
			寄存器-寄存器型
				指令字长固定，指令结构简单，简单的代码生成模型，各种指令的执行周期数接近
				指令条数多，目标代码不够紧凑，程序占用空间大
			寄存器-存储器型
				ALU指令可以直接对存储器操作字操作，容易对指令编码，目标代码较紧凑
				指令中两个操作数不对称，可能限制能够表示的寄存器个数，指令的执行周期也会有较大差异
			存储器-存储器型
				目标代码最紧凑，不需要额外寄存器来保存变量
				指令字差别很大，且频繁地访存将称为性能瓶颈
	寻址方式
		立即数寻址方式和偏移寻址方式使用频率最高
		整数边界:即信息在主存中存放的起始地址必须是该信息宽度的整数倍
			字节信息:XXXXXXXX
			半字信息:XXXXXXX0
			单字信息:XXXXXX00
			双字信息:XXXXX000
	指令系统的设计与优化
		指令系统设计包括
			指令集功能设计
			寻址方式设计
			操作数表示和操作数类型
			寻址方式的表示
			指令集格式设计
		要求达到:
			完整性:在有限的存储空间内,对于任何可解的问题,指令系统提供的指令足够使用
			规整性:对称性和均匀性;对称性指,设置了A-B的指令,也应该设置B-A的指令;均匀性指,各种不同操作数类型和种类要平等对待,例如系统使用浮点数和整型数,那么这两种数据就都要设置相同的操作.
			正交性:指令编码时互不相关,相互独立
			高效率:指令执行速度快,使用频率高
			兼容性:向后兼容
		控制指令:
			指令无条件改变控制流,称为跳转指令
			有条件改变控制流,称为分支指令
			分支,跳转,过程调用和过程返回;分支指令占大多数;除了过程返回以外,其他控制指令都能显式地提供目标地址
			表示分支条件的主要方法:
				条件码:
				条件寄存器
				比较与分支
		指令操作码的优化:
			指令一般由,操作码和地址码组成
			指令格式的优化是指如何用最短的位数来表示指令的操作信息和地址信息
			有以下优化方式:
				哈夫曼编码:
					信息熵 H = - Sum( Pi * logPi ),它用来表示二进制编码表示n个码点时,理论上最短平均编码长度
				等长拓展码
					有两种格式:15/15/15(这种各个数都相同的格式)和8/64/512(各个数不同的格式)
					前者类似于IP地址划分,4位为一个单位,前15个表示最常用的15条指令,第16个额外拓展四位表示次常用的15条指令,依次类推
					后者每个数字表示对应层次的指令分配了 logn+1位来表示,第一个数是8,表示用4位来表示最常用的8条指令,最高位为0,低3位任意;
					第二个数是64表示对应层级的指令有8位,分成两个四位,两个四位的最高位分别是1,0,低位任意...
		指令字格式优化
			假定平均指令长度一定,那么在操作码优化得足够短时,剩下的长度就应该被充分利用来表示地址码,这就是指令字格式优化
			指令集格式包括
				可变长编码格式,当指令系统的寻址方式和操作种类很多时,这种方式是最好的,但是可能是各指令字长和执行时间相差过大
				固定长度编码格式,将操作类型和寻址方式一起编码到操作码中,适合于寻址方式和操作种类少的情况
				混合型编码格式
	指令系统的发展和改进
		CISC
			面向目标程序增强指令功能
				增强运算型指令的功能
				增强数据传送指令的功能
				增强程序控制指令的功能
			面向高级语言的优化实现来改进指令系统
			面向操作系统的优化实现改进指令系统
			缺点:
				各指令使用频度相差悬殊
				指令系统庞大,控制器硬件变得复杂
				指令操作复杂,CPI值大,执行速度慢
				规整性不好,不利于流水技术使用
		RISC
			遵循原则:
				指令条数少,功能简单
				采用简单而又统一的指令格式,并减少寻址方式
				指令的执行在单周期内完成
				采用load-store结构,只有load和store指令才能访问存储器,其他指令仅在寄存器之间进行
				大多数指令采用硬连逻辑实现
				以简单有效的方式支持高级语言
				充分利用流水技术来提高性能
	操作数的类型和大小
		类型指设计指令直接使用的数据类型,定点数,浮点数等
		大小指用来表示某种数据类型的大小,整型使用一个字节或单字等
		类型和大小统称为数据表示,例如MIPS的数据表示有以下两种:
			整数:字节,半字,字,双字
			浮点数:单精度
第三章 流水线技术
	流水线基本概念
		流水线技术：把一个重复的过程分解为若干个子过程，每个子过程由专门的功能部件来实现，把多个处理过程在时间上错开，依次通过各功能段，来并行进行
		流水线中的每个子过程及其功能部件称为流水线的级或段
		流水线的段数称为流水线的深度
		流水技术的特点：
			流水线把一个处理过程分解为若干子过程，依靠它们的并行工作来提高处理速度
			流水线中各段的时间应尽可能相等，时间最长的段会成为瓶颈
			流水线每一个段后都有一个缓冲寄存器
			流水技术适合大量重复的时序过程，只有在不断地提供输入任务才能充分发挥流水线效率
			流水线需要通过时间和排空时间（分别表示第一个任务和最后一个任务从进入流水线到流出结果的时间段），经过‘通过时间’以后，流水线才进入满载工作状态
		流水线的分类
			按照计算机系统的等级不同分为：部件级流水线，处理机级流水线和系统级流水线；三者分别是将，某个运算，某条指令，整个任务作为被分解的过程
			按照所完成的功能分：
				单功能流水线：各段之间连接固定不变，只能完成一种固定功能；
				多功能流水线：各段可以进行不同的连接，实现不同功能的流水线
					静态流水线，当流水线要切换到另一种功能时，必须等前面的任务都流出流水线之后，才能改变连接
					动态流水线，允许在某些段正在实现运算时，另一些段用来实现另一种运算
					区别在于，动态情况下，不同功能流水线能并行
			按是否存在反馈回路
				线性流水线，每段最多只流过一次
				非线性流水线，某些段要多次通过
			按流入和流出的顺序是否相同
				顺序流水线
				乱序流水线
	流水线的性能指标
		吞吐率：单位时间完成的任务数量或输出结果的数量
			各段时间均等的流水线：
				令段数为k，任务数为n，每段需要t的时间完成，则完成所有任务的时间为
					T = k*t + （n-1）*t = （k+n-1）*t
					中间的式子比较好解释：k*t表示通过时间（即第一个任务流入到流出的时间），接下来，每经过一个t就有一个任务流出，还剩（n-1）个任务，故加上（n-1）*t
			各段时间不完全相等的流水线
				参数设置与之前相同，额外假设某段时间大于其他段，其时间为tt，则完成所有任务的时间为
					T = Sum（k） + （n-1）*tt
					任然是通过时间加上（n-1）个任务的处理时间
				说明了，流水线段时间不等时，最长时间的段会称为性能瓶颈
				消除瓶颈段的方法
					细分瓶颈段：将时间长的段功能细分成多个段
					重复设置瓶颈段
		流水线加速比
			顺序处理所花费的时间和流水线处理花费的时间之比
			任务数n取无穷大时，加速比为k（流水线段数）
		流水线效率
			某段的效率是指，所有任务占用这段的时间/总时间
			整条流水线的效率指，k段的段效率分子，分母同加再算效率
		流水线设计中的问题
			瓶颈问题
			流水线的额外开销
				流水寄存器延迟
				时钟偏移开销：流水线中时钟到达各流水寄存器的最大差值时间
				当段数增加时，额外开销也会增加
			冲突问题
	非线性流水线的调度
		单功能非线性流水线的最优调度
			启动距离：向一条非线性流水线的输入端连续输入两个任务之间的时间间隔
			禁用启动距离：会引起非线性流水线功能段使用冲突的启动距离
			预约表
				二维表；横向表示时间，纵向表示流水线的段；表中i行j列为true表示，在时间j时，段i被使用
			根据预约表的调度方法
				1）根据预约表写出禁止表F，禁止表是一个（时间的差值）的集合
					对于每一个段，若使用该段的次数超过一次，那么就计算所有使用时间的差值，加入到集合F中
				2）根据禁止表写出初始冲突向量，冲突向量是一个N位的二进制串，N表示总时间周期数
					根据F，冲突向量对应位设置为1
				3）根据初始向量画出状态转换图
					状态转换图的节点为冲突向量i，边表示对该向量右移j位得到向量ii，对向量i和ii做或运算的向量iii，则得到冲突向量i的下一个节点iii
					右移j位的j须满足向量i的第j位为0（从右往左，从1开始计数）
				4）根据状态转换图写出最优调度方案
					状态转换图中的每一个闭合回路都是一种调度方案，回路上的数字序列就是调度时输入任务的时间间隔
	流水线的相关与冲突
		5段RISC流水线
			取指令周期
			指令译码/读寄存器周期
			执行/有效地址计算周期
			存储器访问/分支完成周期
			写回周期
		需要注意的是，当前后两个任务，前任务的写和后任务的读都会访问通用寄存器时，这里假定这个周期里，前半个周期为写，后半个周期为读，避免冲突
		相关：两条指令之间存在某种依赖关系
			数据相关：后指令使用到了前指令产生的结果
			名相关：
				反相关：后指令写了前指令读的单元
				输出相关：后指令和前指令都输出到同一个单元
				换名技术可以解决此类相关
			控制相关：由分支指令引起的相关
		冲突：
			结构冲突：指令组合因为资源冲突而不能正常执行；当后指令与前指令发生冲突时，后指令延迟一个节拍再开始
			数据冲突：后指令需要用到前指令的结果，但是采用流水线时，后指令执行时，前指令还没执行完，就会产生错误的结果
				写后读冲突：（下同）应该是先写后读，但是发生了相反的操作，故产生了冲突；采用定向技术解决此问题
				写后写冲突
				读后写冲突
			控制冲突：即选择流水线上下一条指令与实际计算跳转方向冲突。
				最简单的处理办法是，检测到分支指令，就停止后续执行，等待流水线排空以后，在根据结果来选择下条进入流水线的指令；这样的方法称为分支延迟
				分支失败和分支成功：指的是在确定是否跳转分支前，继续让下一条指令执行，得到要跳转的结果，再终止该指令，执行跳转；得到不跳转的结果就继续执行。
第四章 向量处理机
	向量的处理方式
		横向处理方式：用于普通机器
		纵向处理方式：运算的时候使用列向量来作为参数
		纵横（分组）处理方式：将某个列向量分为几部分，同一部分中采用纵向处理，不同部分采用横向处理
	向量处理机的结构
		存储器-存储器结构：适用于纵向处理方式，因为当一个列向量很长时，寄存器也不够用...
			多提交叉并行存储器和缓冲器技术
		寄存器-寄存器结构：适用于分组处理方式
	提高向量处理机性能的常用技术
		是指多个功能部件，并行工作
		链接技术，加快一串向量指令的执行
			当前一条指令的结果寄存器是后一条指令的源寄存器且不存在任何其他冲突时，就可以采用链接技术来提高性能。
			链接就是将功能部件链接起来进行流水处理
		循环开采技术，加快循环处理
			分段开采，当向量长度大于向量寄存器长度时，将长向量分成长度固定的段，然后循环分段处理，每次循环处理一个向量段
		多处理机系统，提高性能
第七章 存储系统
	存储系统的基本知识
		多级层次结构的目标：从CPU的角度来看，让存储系统的容量和每位价格接近最远层，让速度接近最近层
		性能参数
			S，T，C分别表示容量，访问时间和每位价格
			命中率H：CPU访问该存储系统时，在M1中找到所需信息的概率；同时使用F表示不命中率
			平均访存时间：
				命中时，访问时间为T1，称为命中时间
				不命中时，从下一层存储结构中找到所需的，移到该层来：T2表示在第二层得到需要信息的时间，Tb表示从T2移到T1的时间
				所以，不命中时，总时间花销是，T1+T2+Tb，Tm=T2+Tb统称为不命中开销
				平均访问时间就写作，T = T1 + FTm
	降低Cache不命中率
		三种不命中
			强制性不命中：当第一次访问一个块时，该块不在Cache中，需要从下一级存储器中调入Cache
			容量不命中：程序执行时所需的块不能全部调入Cache中，则当某些块被替换后，若重新被访问就会发生不命中
			冲突不命中：在组相连或直接映像中，若太多块映像到同一组中，则会出现该组中某个块被别的块替换，然后又被重新访问的情况
		3C的特点
			相联度越高，冲突不命中就越少
			强制性不命中和容量不命中不受相联度影响
			强制性不命中不受Cache容量的影响，但容量不命中却随着容量的增加而减少
		降低不命中率的方法
			增加Cache块大小
				增加空间局部性，减少了强制性不命中
				减少了Cache中块的数目，所以有可能会增加冲突不命中
			增加Cache容量
				会增加成本和命中时间
			提高相联度
				会增加命中时间
			伪相联Cache
			硬件预取：指令和数据在处理器提出访问请求前进行预取
			编译器控制预取：和上种方法结合，可以加成
			编译优化
			‘牺牲’Cache：在Cache和下一级存储结构之间设置一个小Cache，用来存放被替换出去的块，当Cache不命中时，就到这里查找
		减少Cache不命中开销
			采用两级Cache
			让读不命中优先于写：推迟读不命中，直到写缓冲器清空
			写缓冲合并：多次写同一个地址块时，直接在缓冲区里覆盖
			请求字处理：在下一级查找需要的块时，不用等到和把整个需要的块都移到Cache中，只要查找到需要的字就将其送入CPU
			非阻塞Cache技术
		减少命中时间
			容量小，结构简单的Cache
			虚拟Cache
			Cache访问流水化
			踪迹Cache
	并行主存系统
		在一个访存周期内能并行访问多个存储字的存储器，能有效提高带宽
		单体多字存储器
			每个存储周期能读出m个CPU字
		多体交叉存储字：多个单体多字存储器连接而成
			高位交叉编址：不同内存，对应位置的低位地址相同，同一条内存中，高位地址相同
			低位交叉编址：不同内存，对应位置的低位地址不同，同一条内存中，低位地址相同
		


